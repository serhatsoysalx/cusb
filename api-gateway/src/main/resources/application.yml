server:
  port: 8080

spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      routes:
        - id: auth-service
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10
                key-resolver: "#{@userKeyResolver}"
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY, GATEWAY_TIMEOUT
                methods: GET, POST
            - name: CircuitBreaker
              args:
                name: userServiceCircuitBreaker
                fallbackUri: forward:/fallback/user
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/auth/.well-known/jwks.json
        client:
          registration:
            my-client:
              client-id: my-client-id
              client-secret: my-client-secret
              authorization-grant-type: client_credentials
              token-uri: http://localhost:8080/auth/oauth/token

  consul:
    host: localhost
    port: 8500
    discovery:
      service-name: apigateway
      register: true

jwt:
  secret: my-secret-key
  expiration: 3600000

management:
  endpoints:
    prometheus:
      enabled: true
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  metrics:
    tags:
      application: api-gateway
  loadbalancer:
    clients:
      auth-service:
        instances:
          - http://localhost:8081
